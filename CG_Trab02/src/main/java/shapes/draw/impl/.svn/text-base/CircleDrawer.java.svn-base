package shapes.draw.impl;

import javax.media.opengl.GL;

import color.Color;

import renderer.Renderer;
import shapes.BoundingBox;
import shapes.Circle;
import shapes.Point2D;
import shapes.draw.ShapeDrawer;

public class CircleDrawer implements ShapeDrawer<Circle> {

    @Override
    public void draw(Renderer renderer, Circle circle) {
        GL gl = renderer.getGL();
        
        Color color = circle.color();
        gl.glColor4d(color.red(), color.green(), color.blue(), color.alpha());
        
        Point2D center = circle.getCenterPoint();
        double radius = circle.getRadius();
        
        //drawCircle(gl, center.getX(), center.getY(), radius);
        
        
      //Esquema de rotação.
        gl.glPushMatrix();
           	BoundingBox bb = circle.getBoundingBox();
        	
        	float a = (float) (bb.getBottomRight().getX() - (bb.getBoundingBox().width() / 2));
        	float b = (float) (bb.getBottomRight().getY() - (bb.getBoundingBox().height() / 2));
        
			gl.glTranslated(a, b, 0.0f);
        	gl.glRotatef(circle.getDegreeRotation(), 0, 0, 1);       	
        	gl.glTranslated(-a, -b, 0.0f);

        	//Esquema de translação.
        	gl.glTranslated(circle.getTranslate().getX(), circle.getTranslate().getY(), 0.0f);
        	drawCircle(gl, center.getX(), center.getY(), radius);        	

        gl.glPopMatrix();
        
        
    }
    
    private void drawCircle(GL gl, double xa, double ya, double radius) {
         final double PI = Math.PI;
         double TWO_PI = PI * 2;
         double segmnt = TWO_PI / 36;
                  
     	//Desenho poligono.
         gl.glBegin(GL.GL_POLYGON);

	         for (double theta = 0; theta < TWO_PI; theta += segmnt) {
	             double y = (ya + (Math.cos(theta) * radius));
	             double x = (xa + (Math.sin(theta) * radius));
	             gl.glVertex2d(x, y);
	         }
         gl.glEnd();
         
       //Desenha contorno.
         gl.glColor4d(0, 0, 0, 1);
         gl.glBegin(GL.GL_LINE_LOOP);

            for (double theta = 0; theta < TWO_PI; theta += segmnt) {
                double y = (ya + (Math.cos(theta) * radius));
                double x = (xa + (Math.sin(theta) * radius));
                gl.glVertex2d(x, y);
            }
            
         gl.glEnd();
    }

}
