package shapes.draw.impl;

import javax.media.opengl.GL;

import color.Color;
import renderer.Renderer;
import shapes.BoundingBox;
import shapes.OpenPolygon;
import shapes.Point2D;
import shapes.draw.ShapeDrawer;

public class OpenPolygonDrawer implements ShapeDrawer<OpenPolygon> {

    @Override
    public void draw(Renderer renderer, OpenPolygon oPolygon) {
        GL gl = renderer.getGL();
        
        Color color = oPolygon.color();
        gl.glColor4d(color.red(), color.green(), color.blue(), color.alpha());
       
        //Esquema de rotação.
        gl.glPushMatrix();
	       	BoundingBox bb = oPolygon.getBoundingBox();
	    	
	    	float a = (float) (bb.getBottomRight().getX() - (bb.getBoundingBox().width() / 2));
	    	float b = (float) (bb.getBottomRight().getY() - (bb.getBoundingBox().height() / 2));
	    
			gl.glTranslated(a, b, 0.0f);
	    	gl.glRotatef(oPolygon.getDegreeRotation(), 0, 0, 1);       	
	    	gl.glTranslated(-a, -b, 0.0f);
	
	    	//Esquema de translação.
	    	gl.glTranslated(oPolygon.getTranslate().getX(), oPolygon.getTranslate().getY(), 0.0f);
	    	drawOpenPolygon(gl, oPolygon.getPoints());    	

    	gl.glPopMatrix();
    }

    private void drawOpenPolygon(GL gl, Point2D[] points) {       
    	//Desenho poligono.
        gl.glBegin(GL.GL_POLYGON);
            for (Point2D point : points) {
                gl.glVertex2d(point.getX(), point.getY());
            }
        gl.glEnd();
        
        //Desenha contorno.
        gl.glColor4d(0, 0, 0, 1);
        gl.glBegin(GL.GL_LINE_STRIP);
	        for (Point2D point : points) {
	            gl.glVertex2d(point.getX(), point.getY());
	        }
        gl.glEnd();
    
    }

}
